module testbench;
reg clk;
reg rst_n;
reg valid_in;
reg [DATA_WD-1 : 0] data_in;
reg [DATA_BYTE_WD-1 : 0] keep_in;
reg last_in;
wire valid_out;
wire [DATA_WD-1 : 0] data_out;
wire [DATA_BYTE_WD-1 : 0] keep_out;
wire last_out;

data_insert_module dut(
  .clk(clk),
  .rst_n(rst_n),
  .valid_in(valid_in),
  .data_in(data_in),
  .keep_in(keep_in),
  .last_in(last_in),
  .valid_out(valid_out),
  .data_out(data_out),
  .keep_out(keep_out),
  .last_out(last_out)
);

initial begin
  clk = 0;
  forever #5 clk = ~clk;
end

initial begin
  rst_n = 0;
  #10 rst_n = 1;
end

reg [DATA_WD-1 : 0] data_test [0:2];
reg [DATA_BYTE_WD-1 : 0] keep_test [0:2];
reg last_test [0:2];

// 原始数据
data_test[0] = 32'h11223344;
keep_test[0] = 4'b1111;
last_test[0] = 1'b0;

// header数据
data_test[1] = 32'hAABBCCDD;
keep_test[1] = 4'b0001;
last_test[1] = 1'b0;

// 原始数据
data_test[2] = 32'h55667788;
keep_test[2] = 4'b1111;
last_test[2] = 1'b1;

integer i;
integer j;
integer k;
integer cnt;

initial begin
  // 发送原始数据
  for (i = 0; i < 3; i = i + 1) begin
    valid_in = 1;
    data_in = data_test[i];
    keep_in = keep_test[i];
    last_in = last_test[i];
    #10;
  end

  // 发送header数据
  valid_in = 1;
  data_in = 32'hAABBCCDD;
  keep_in = 4'b0001;
  last_in = 1'b0;
  #10;

  // 发送原始数据
  for (i = 0; i < 3; i = i + 1) begin
    valid_in = 1;
    data_in = data_test[i];
    keep_in = keep_test[i];
    last_in = last_test[i];
    #10;
  end

  // 等待输出数据
  cnt = 0;
  for (i = 0; i < 7; i = i + 1) begin
    if (valid_out) begin
      $display("data_out = %h, keep_out = %b, last_out = %b", data_out, keep_out, last_out);
      cnt = cnt + 1;
    end
    #10;
  end

  // 验证输出数据
  j = 0;
  k = 0;
  for (i = 0; i < cnt; i = i + 1) begin
    if (i == 0) begin // 第一条输出数据
      if (data_out != data_test[j] || keep_out != keep_test[j] || last_out != last_test[j]) begin
        $display("ERROR: data_out = %h, keep_out = %b, last_out = %b", data_out, keep_out, last_out);
      end
    end else if (i == cnt - 1) begin // 最后一条输出数据
      if (data_out != data_test[j] || keep_out != keep_test[j] || last_out != 1'b1) begin
        $display("ERROR: data_out = %h, keep_out = %b, last_out = %b", data_out, keep_out, last_out);
      end
    end else begin // 中间的输出数据
      if (data_out != data_test[j] || keep_out != keep_test[j] || last_out != 1'b0) begin
        $display("ERROR: data_out = %h, keep_out = %b, last_out = %b", data_out, keep_out, last_out);
      end
    end
    k = k + 1;
    if (k == keep_test[j]) begin // 切换到下一组测试数据
      j = j + 1;
      k = 0;
    end
    #10;
  end
end

module testbench;

parameter DATA_WD = 32; // 数据宽度
parameter DATA_BYTE_WD = DATA_WD / 8; // 数据字节数

reg clk;
reg rst_n;
reg valid_in;
reg [DATA_WD-1 : 0] data_in;
reg [DATA_BYTE_WD-1 : 0] keep_in;
reg last_in;
wire valid_out;
wire [DATA_WD-1 : 0] data_out;
wire [DATA_BYTE_WD-1 : 0] keep_out;
wire last_out;

data_insert_module dut(
  .clk(clk),
  .rst_n(rst_n),
  .valid_in(valid_in),
  .data_in(data_in),
  .keep_in(keep_in),
  .last_in(last_in),
  .valid_out(valid_out),
  .data_out(data_out),
  .keep_out(keep_out),
  .last_out(last_out)
);

initial begin
  clk = 0;
  forever #5 clk = ~clk;
end

initial begin
  rst_n = 0;
  #10 rst_n = 1;
end

initial begin
  // 测试数据
  reg [DATA_WD-1 : 0] data_test [0:2];
  reg [DATA_BYTE_WD-1 : 0] keep_test [0:2];
  reg last_test [0:2];

  // 原始数据
  data_test[0] = 32'h11223344;
  keep_test[0] = 4'b1111;
  last_test[0] = 1'b0;

  // header数据
  data_test[1] = 32'hAABBCCDD;
  keep_test[1] = 4'b0001;
  last_test[1] = 1'b0;

  // 原始数据
  data_test[2] = 32'h55667788;
  keep_test[2] = 4'b1111;
  last_test[2] = 1'b1;

  // 发送测试数据
  integer i;
  for (i = 0; i < 3; i = i + 1) begin
    valid_in = 1;
    data_in = data_test[i];
    keep_in = keep_test[i];
    last_in = last_test[i];
    #10;
  end

  // 等待输出数据
  integer cnt = 0;
  while (cnt < 3) begin
    if (valid_out) begin
      $display("data_out = %h, keep_out = %b, last_out = %b", data_out, keep_out, last_out);
      cnt = cnt + 1;
    end
    #10;
  end
end

endmodule
